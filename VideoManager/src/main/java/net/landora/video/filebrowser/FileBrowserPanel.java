/**
 *     Copyright (C) 2012 Blake Dickie
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * FileBrowserPanel.java
 *
 * Created on Dec 27, 2011, 7:26:43 PM
 */
package net.landora.video.filebrowser;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.*;
import net.landora.video.VideoManagerApp;
import net.landora.video.filestate.data.LocalPathManager;
import net.landora.video.filestate.data.SharedDirectory;
import net.landora.video.info.file.FileMovedEvent;
import net.landora.video.manager.ContentPanel;
import net.landora.video.ui.tree.LazyTreeChildrenFactory;
import net.landora.video.ui.tree.LazyTreeLoadingManager;
import net.landora.video.ui.tree.LazyTreeNode;
import net.landora.video.utils.BusReciever;
import net.landora.video.utils.Representation;
import net.landora.video.utils.UIUtils;

/**
 *
 * @author bdickie
 */
public class FileBrowserPanel extends ContentPanel<VideoFile> {

    private FileTableModel tableModel;
    
    /** Creates new form FileBrowserPanel */
    public FileBrowserPanel() {
        initComponents();
        
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode();
        
        FolderLoader factory = new FolderLoader();
        
        for(SharedDirectory dir: LocalPathManager.getInstance().getAvaliableLocalPaths()) {
            Representation<File> rep = new Representation<File>(dir.getName(), LocalPathManager.getInstance().getLocalPath(dir));
            LazyTreeNode node = new LazyTreeNode(rep, factory);
            rootNode.add(node);
        }
        
        treeFiles.setModel(new DefaultTreeModel(rootNode));
        treeFiles.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        LazyTreeLoadingManager.getInstance().setup(treeFiles);
        
        tableModel = new FileTableModel();
        
        tblFiles.setModel(tableModel);
        
        tblFiles.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                tblFilesSelectionValueChanged(e);
            }
        });
        
        VideoManagerApp.getInstance().getEventBus().addHandlersWeak(this);
    }

    @Override
    public void loadView() {
        reload();
    }
    
    private void reload() {
        
    }
    
    @BusReciever
    private void fileMoved(FileMovedEvent evt) {
        File folder = tableModel.getFolder();
        if (folder == null)
            return;
        
        if (folder.equals(evt.getFromFile().getParentFile())
                || folder.equals(evt.getToFile().getParentFile())) {
            tableModel.refresh();
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeFiles = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFiles = new javax.swing.JTable();

        setPriority(net.landora.video.manager.ContentPanel.Priority.Main);
        setTitle("Files");
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setResizeWeight(0.33);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        treeFiles.setName("treeFiles"); // NOI18N
        treeFiles.setRootVisible(false);
        treeFiles.setShowsRootHandles(true);
        treeFiles.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeFilesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeFiles);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFiles.setName("tblFiles"); // NOI18N
        tblFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFilesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblFilesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblFilesMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblFiles);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void treeFilesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeFilesValueChanged
        TreePath path = treeFiles.getSelectionPath();
        File folder;
        if (path == null)
            folder = null;
        else
            folder = (File)UIUtils.unwrap(((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject());
        
        tableModel.setFolder(folder);
    }//GEN-LAST:event_treeFilesValueChanged

    private void tblFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilesMouseClicked
        maybePopup(evt);
    }//GEN-LAST:event_tblFilesMouseClicked

    private void tblFilesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilesMousePressed
        maybePopup(evt);
    }//GEN-LAST:event_tblFilesMousePressed

    private void tblFilesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilesMouseReleased
        maybePopup(evt);
    }//GEN-LAST:event_tblFilesMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tblFiles;
    private javax.swing.JTree treeFiles;
    // End of variables declaration//GEN-END:variables

    private class FolderLoader implements LazyTreeChildrenFactory {

        public List<? extends MutableTreeNode> getChildren(Object value) {
            File file = (File)value;
            
            List<MutableTreeNode> result = new ArrayList<MutableTreeNode>();
            File[] files = file.listFiles();
            Arrays.sort(files, UIUtils.LEXICAL_SORTER);
            
            for(File child: files) {
                if (child.isDirectory() && !child.isHidden()) {
                    result.add(new LazyTreeNode(new Representation<File>(child.getName(), child), this));
                }
            }
            
            return result;
        }
        
    }
    
    
    
    private void tblFilesSelectionValueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            int[] rows = tblFiles.getSelectedRows();
            List<VideoFile> selectedFiles = new ArrayList<VideoFile>(rows.length);
            for(int row: rows)
                selectedFiles.add(tableModel.getFile(tblFiles.convertRowIndexToModel(row)));
            setCurrentContext(selectedFiles);
        }
    }
}
