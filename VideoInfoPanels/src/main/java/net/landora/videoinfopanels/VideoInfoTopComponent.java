/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.landora.videoinfopanels;

import java.awt.CardLayout;
import java.awt.Font;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import net.landora.gsuiutils.UIUtils;
import net.landora.videoinfo.MovieMetadata;
import net.landora.videoinfo.MultiSeasonSeriesMetadata;
import net.landora.videoinfo.SeriesMetadata;
import net.landora.videoinfo.VideoMetadata;
import org.apache.commons.lang.StringEscapeUtils;
import org.openide.util.Exceptions;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.landora.videoinfopanels//VideoInfo//EN",
autostore = false)
@TopComponent.Description(preferredID = "VideoInfoTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "net.landora.videoinfopanels.VideoInfoTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_VideoInfoAction",
preferredID = "VideoInfoTopComponent")
public final class VideoInfoTopComponent extends TopComponent implements LookupListener {

    public VideoInfoTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(VideoInfoTopComponent.class, "CTL_VideoInfoTopComponent"));
        setToolTipText(NbBundle.getMessage(VideoInfoTopComponent.class, "HINT_VideoInfoTopComponent"));

        lblPicture.setText(null);
        
        ((CardLayout)getLayout()).show(this, "noSelection");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlNoSelection = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlDetails = new javax.swing.JPanel();
        lblPicture = new javax.swing.JLabel();
        pnlInfo = new javax.swing.JPanel();
        txtInfo = new javax.swing.JEditorPane();

        setLayout(new java.awt.CardLayout());

        pnlNoSelection.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(jLabel1.getFont().deriveFont((jLabel1.getFont().getStyle() | java.awt.Font.ITALIC)));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(VideoInfoTopComponent.class, "VideoInfoTopComponent.jLabel1.text")); // NOI18N
        pnlNoSelection.add(jLabel1, new java.awt.GridBagConstraints());

        add(pnlNoSelection, "noSelection");

        pnlDetails.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblPicture, org.openide.util.NbBundle.getMessage(VideoInfoTopComponent.class, "VideoInfoTopComponent.lblPicture.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlDetails.add(lblPicture, gridBagConstraints);

        pnlInfo.setLayout(new java.awt.BorderLayout());

        txtInfo.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        txtInfo.setOpaque(false);
        pnlInfo.add(txtInfo, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlDetails.add(pnlInfo, gridBagConstraints);

        add(pnlDetails, "details");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlNoSelection;
    private javax.swing.JEditorPane txtInfo;
    // End of variables declaration//GEN-END:variables
    
    private Lookup.Result<VideoMetadata> result = null;
    
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(VideoMetadata.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener (this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        VideoMetadata md = UIUtils.select(result.allInstances());
        
        if (md == null) {
            ((CardLayout)getLayout()).show(this, "noSelection");
            return;
        } else {
            ((CardLayout)getLayout()).show(this, "details");
        }
        
               
        byte[] data = md.getPosterImage();
        if (data == null)
            lblPicture.setIcon(null);
        else {
            try {
                Image img = ImageIO.read(new ByteArrayInputStream(data));
                lblPicture.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                lblPicture.setIcon(null);
                Exceptions.printStackTrace(ex);
            }
        }
        
        Map<String,String> values = new LinkedHashMap<String, String>();
        if (md.isMovie()) {
            MovieMetadata movie = (MovieMetadata)md;
            values.put("Movie Name", movie.getMovieName());
        } else if (md.isSeries()) {
            SeriesMetadata series = (SeriesMetadata)md;
            values.put("Series name", series.getSeriesName());
            if (md.isMultiSeasonSeries()) {
                MultiSeasonSeriesMetadata multiSeason = (MultiSeasonSeriesMetadata)md;
                values.put("Season", String.valueOf(multiSeason.getSeasonNumber()));
            }
            values.put("Episode Number", series.getEpisodeNumber());
            if (series.getEpisodeName() != null) {
                values.put("Episode Name", series.getEpisodeName());
            }
        }
        
        md.addExtraInformation(values);
        
        if (md.isAdult()) {
            values.put("Adult Content", "Yes");
        }
        
        StringBuilder buffer = new StringBuilder();
        buffer.append("<html>");
        
        Font font = lblPicture.getFont();
        buffer.append("<head>");
        buffer.append("<style type=\"text/css\">");
        
        buffer.append(" { margin-top: 0px; margin-bottom: 0px; margin-right: 0px; margin-left: 0px;  }");
        
        buffer.append("table { border-collapse:collapse; }");
        
        buffer.append(" td { ");
        buffer.append(" font-family: \"");
        buffer.append(font.getFamily());
        buffer.append("\"; font-size: ");
        buffer.append(font.getSize() - 2);
        buffer.append("px; ");
        
        buffer.append(" }\n");
        
        buffer.append(" td.label { ");
        buffer.append("text-align: right; ");
        buffer.append("font-weight:bold; ");
        buffer.append("white-space:nowrap; ");
        
        
        buffer.append(" font-family: \"");
        buffer.append(font.getFamily());
        buffer.append("\"; font-size: ");
        buffer.append(font.getSize() - 2);
        buffer.append("px; ");
        
        buffer.append("} ");
        buffer.append("</style>");
        buffer.append("</head>");
        buffer.append("<body>");
        buffer.append("<table>");
        boolean first = true;
        for (Map.Entry<String, String> entry : values.entrySet()) {
            buffer.append("<tr><td class=\"label\">");
            buffer.append(StringEscapeUtils.escapeHtml(entry.getKey()));
            buffer.append("</td><td>");
            buffer.append(StringEscapeUtils.escapeHtml(entry.getValue()));
            buffer.append("</td></tr>");
        }
        
        buffer.append("</table>");
        buffer.append("</body>");
        buffer.append("</html>");
        
        txtInfo.setContentType("text/html");
        txtInfo.setText(buffer.toString());
    }
}
