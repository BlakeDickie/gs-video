/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.landora.animeinfo.notifications;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.ListSelectionModel;
import net.landora.animeinfo.data.AnimeNotification;
import net.landora.gsuiutils.UIUtils;
import org.openide.nodes.Node;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.util.LookupListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.landora.animeinfo.notifications//NotificationsViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "NotificationsViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.landora.animeinfo.notifications.NotificationsViewerTopComponent")
@ActionReference(path = "Menu/Window", position = 333)
@TopComponent.OpenActionRegistration(displayName = "#CTL_NotificationsViewerAction", preferredID = "NotificationsViewerTopComponent")
public final class NotificationsViewerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private BeanTreeView view;
    
    Result<AnimeNotification> lookupResult;
    
    public NotificationsViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(NotificationsViewerTopComponent.class, "CTL_NotificationsViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(NotificationsViewerTopComponent.class, "HINT_NotificationsViewerTopComponent"));

        
        view = new BeanTreeView();
        view.setRootVisible(false);
        view.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        pnlTree.add(view, BorderLayout.CENTER);
        
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        
        mgr.setRootContext(new AbstractNode(Children.create(new RootNodesCreator(), false)));
        
        
        
        lookupResult = getLookup().lookupResult(AnimeNotification.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSplit = new javax.swing.JSplitPane();
        pnlTree = new javax.swing.JPanel();
        pnlDetails = new javax.swing.JPanel();
        pnlNoSelection = new javax.swing.JPanel();
        lblNoSelection = new javax.swing.JLabel();
        pnlNotification = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        pnlTree.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlTree.setLayout(new java.awt.BorderLayout());
        pnlSplit.setLeftComponent(pnlTree);

        pnlDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlDetails.setLayout(new java.awt.CardLayout());

        pnlNoSelection.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblNoSelection, org.openide.util.NbBundle.getMessage(NotificationsViewerTopComponent.class, "NotificationsViewerTopComponent.lblNoSelection.text")); // NOI18N
        pnlNoSelection.add(lblNoSelection, new java.awt.GridBagConstraints());

        pnlDetails.add(pnlNoSelection, "no_selection");

        pnlNotification.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NotificationsViewerTopComponent.class, "NotificationsViewerTopComponent.jLabel1.text")); // NOI18N
        pnlNotification.add(jLabel1, new java.awt.GridBagConstraints());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NotificationsViewerTopComponent.class, "NotificationsViewerTopComponent.jLabel2.text")); // NOI18N
        pnlNotification.add(jLabel2, new java.awt.GridBagConstraints());

        pnlDetails.add(pnlNotification, "notification");

        pnlSplit.setRightComponent(pnlDetails);

        add(pnlSplit, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblNoSelection;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlNoSelection;
    private javax.swing.JPanel pnlNotification;
    private javax.swing.JSplitPane pnlSplit;
    private javax.swing.JPanel pnlTree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        lookupResult.addLookupListener(listener);
    }

    @Override
    public void componentClosed() {
        lookupResult.removeLookupListener(listener);
    }
    
    private LookupListener listener = new LookupListener() {

        @Override
        public void resultChanged(LookupEvent le) {
            lookupChanged(le);
        }
    };
    
    public void lookupChanged(LookupEvent le) {
        AnimeNotification notification = UIUtils.select(lookupResult.allInstances());
        String currentView;
        if (notification != null) {
            currentView = "notification";
        } else
            currentView = "no_selection";
        
        ((CardLayout)pnlDetails.getLayout()).show(pnlDetails, currentView);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private final ExplorerManager mgr = new ExplorerManager();
    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }
    
    private static class RootNodesCreator  extends ChildFactory<String> {

        @Override
        protected boolean createKeys(List<String> list) {
            list.add("Notifications");
            list.add("Messages");
            return true;
        }

        @Override
        protected Node createNodeForKey(String key) {
            AbstractNode node;
            if (key.equals("Notifications"))
                node = new AbstractNode(Children.create(new AnimeNotificationChildrenFactory(null), false));
            else if (key.equals("Messages"))
                node = new AbstractNode(Children.LEAF);
            else
                return null;
            
            node.setName(key);
            return node;
        }
        
        
        
    }
}
